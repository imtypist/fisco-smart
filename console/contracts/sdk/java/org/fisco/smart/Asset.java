package org.fisco.smart;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int16;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50600080546001600160a01b031916611009908117909155604051632b0025b560e11b815260606004820152600760648201819052661d17d85cdcd95d60ca1b608483015260a0602483015260a4820152661858d8dbdd5b9d60ca1b60c482015260e06044820152600b60e48201526a61737365745f76616c756560a81b61010482015281906356004b6a90610124016020604051808303816000875af11580156100bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e391906100ea565b5050610103565b6000602082840312156100fc57600080fd5b5051919050565b6112a7806101126000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639b80b05014610046578063ea87152b14610071578063fcd7e3c114610092575b600080fd5b610059610054366004610c48565b6100bc565b60405160019190910b81526020015b60405180910390f35b61008461007f366004610cb5565b610596565b604051908152602001610068565b6100a56100a0366004610cfa565b610753565b604080519215158352602083019190915201610068565b6000600181806100cb87610753565b90935091506001831515146101365784866040516100e99190610d67565b6040518091039020886040516100ff9190610d67565b6040519081900381206000198252906000805160206112528339815191529060200160405180910390a4600019935050505061058f565b61013f86610753565b90935090506001831515146101aa57848660405161015d9190610d67565b6040518091039020886040516101739190610d67565b6040519081900381206001198252906000805160206112528339815191529060200160405180910390a4600119935050505061058f565b8482101561020e5784866040516101c19190610d67565b6040518091039020886040516101d79190610d67565b6040519081900381206002198252906000805160206112528339815191529060200160405180910390a4600219935050505061058f565b806102198682610d99565b101561027b57848660405161022e9190610d67565b6040518091039020886040516102449190610d67565b6040519081900381206003198252906000805160206112528339815191529060200160405180910390a4600319935050505061058f565b600061028f61028a8785610db1565b610838565b60408051608081018252600b8183019081526a61737365745f76616c756560a81b60608301528152602081018390528151600180825281840190935292935091600091816020015b60408051808201909152606080825260208201528152602001906001900390816102d7579050509050818160008151811061031457610314610dc8565b602090810291909101810191909152604080519182018152828252600080549151630c93508560e31b815290916001600160a01b03169063649a842890610361908f908690600401610e0a565b6020604051808303816000875af1158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190610ed4565b90508060011461040f57898b6040516103bd9190610d67565b60405180910390208d6040516103d39190610d67565b6040519081900381206004198252906000805160206112528339815191529060200160405180910390a46004199850505050505050505061058f565b600061041e61028a8c89610d99565b60408051608081018252600b8183019081526a61737365745f76616c756560a81b606083015281526020810183905281516001808252818401909352909750919250816020015b604080518082019091526060808252602082015281526020019060019003908161046557905050935084846000815181106104a2576104a2610dc8565b6020908102919091018101919091526040805191820181528582526000549051630c93508560e31b81529194506001600160a01b03169063649a8428906104ef908f908790600401610e0a565b6020604051808303816000875af115801561050e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105329190610ed4565b508a8c6040516105429190610d67565b60405180910390208e6040516105589190610d67565b60405190819003812060008252906000805160206112528339815191529060200160405180910390a4600099505050505050505050505b9392505050565b6000806001816105a586610753565b90925090506001821515146106f85760006105bf86610838565b60408051608081018252600b8183019081526a61737365745f76616c756560a81b60608301528152602081018390528151600180825281840190935292935091600091816020015b6040805180820190915260608082526020820152815260200190600190039081610607579050509050818160008151811061064457610644610dc8565b602090810291909101810191909152604080519182018152828252600080549151630c93508560e31b815290916001600160a01b03169063649a842890610691908e908690600401610e0a565b6020604051808303816000875af11580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d49190610ed4565b905080600114156106e857600097506106ee565b60011997505b50505050506106fe565b60001992505b848660405161070d9190610d67565b604051908190038120858252907f91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d9060200160405180910390a350909150505b92915050565b60008061076c6040518060200160405280606081525090565b60008054604051633e10510b60e01b81526001600160a01b0390911690633e10510b9061079d908890600401610eed565b600060405180830381865afa1580156107ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e29190810190610f6b565b80515190935090915060009061080057506000958695509350505050565b61082b836000015160008151811061081a5761081a610dc8565b60200260200101516020015161094c565b9196919550909350505050565b60608161085c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156108865780610870816110d2565b915061087f9050600a83611103565b9150610860565b60008167ffffffffffffffff8111156108a1576108a1610b37565b6040519080825280601f01601f1916602001820160405280156108cb576020820181803683370190505b50905060006108db600184610db1565b90505b8515610943576108ef600a87611117565b6108fa906030610d99565b60f81b82826109088161112b565b93508151811061091a5761091a610dc8565b60200101906001600160f81b031916908160001a90535061093c600a87611103565b95506108de565b50949350505050565b600061074d82600080828180805b8351811015610b1157603084828151811061097757610977610dc8565b016020015160f81c108015906109a75750603984828151811061099c5761099c610dc8565b016020015160f81c11155b15610a0e5781156109ca57856109bc57610b11565b856109c68161112b565b9650505b6109d5600a84611142565b925060308482815181106109eb576109eb610dc8565b01602001516109fd919060f81c610db1565b610a079084610d99565b9250610aff565b838181518110610a2057610a20610dc8565b60209101015160f81c602e1415610aa2578115610a995760405162461bcd60e51b815260206004820152602c60248201527f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560448201526b6420696e20737472696e672160a01b60648201526084015b60405180910390fd5b60019150610aff565b60405162461bcd60e51b815260206004820152602c60248201527f4e6f6e2d6e756d6572616c2063686172616374657220656e636f756e7465726560448201526b6420696e20737472696e672160a01b6064820152608401610a90565b80610b09816110d2565b91505061095a565b50841561094357610b2385600a611245565b610b2d9083611142565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516020810167ffffffffffffffff81118282101715610b7057610b70610b37565b60405290565b6040805190810167ffffffffffffffff81118282101715610b7057610b70610b37565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bc257610bc2610b37565b604052919050565b600067ffffffffffffffff821115610be457610be4610b37565b50601f01601f191660200190565b600082601f830112610c0357600080fd5b8135610c16610c1182610bca565b610b99565b818152846020838601011115610c2b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610c5d57600080fd5b833567ffffffffffffffff80821115610c7557600080fd5b610c8187838801610bf2565b94506020860135915080821115610c9757600080fd5b50610ca486828701610bf2565b925050604084013590509250925092565b60008060408385031215610cc857600080fd5b823567ffffffffffffffff811115610cdf57600080fd5b610ceb85828601610bf2565b95602094909401359450505050565b600060208284031215610d0c57600080fd5b813567ffffffffffffffff811115610d2357600080fd5b610d2f84828501610bf2565b949350505050565b60005b83811015610d52578181015183820152602001610d3a565b83811115610d61576000848401525b50505050565b60008251610d79818460208701610d37565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610dac57610dac610d83565b500190565b600082821015610dc357610dc3610d83565b500390565b634e487b7160e01b600052603260045260246000fd5b60008151808452610df6816020860160208601610d37565b601f01601f19169290920160200192915050565b606081526000610e316060830160078152661d17d85cdcd95d60ca1b602082015260400190565b602083820381850152610e448287610dde565b915060408483038186015281830186518385528181518084528487019150848160051b8801019350858301925060005b81811015610ec457878503603f1901835283518051878752610e9888880182610dde565b91890151878303888b0152919050610eb08183610dde565b965050509286019291860191600101610e74565b50929a9950505050505050505050565b600060208284031215610ee657600080fd5b5051919050565b","604081526000610f146040830160078152661d17d85cdcd95d60ca1b602082015260400190565b8281036020840152610d2f8185610dde565b600082601f830112610f3757600080fd5b8151610f45610c1182610bca565b818152846020838601011115610f5a57600080fd5b610d2f826020830160208701610d37565b60008060408385031215610f7e57600080fd5b82518015158114610f8e57600080fd5b8092505060208084015167ffffffffffffffff80821115610fae57600080fd5b8186019150828288031215610fc257600080fd5b610fca610b4d565b825182811115610fd957600080fd5b80840193505087601f840112610fee57600080fd5b82518281111561100057611000610b37565b8060051b61100f868201610b99565b918252848101860191868101908b84111561102957600080fd5b87870192505b838310156110bf578251868111156110475760008081fd5b87016040818e03601f1901121561105e5760008081fd5b611066610b76565b89820151888111156110785760008081fd5b6110868f8c83860101610f26565b82525060408201518881111561109c5760008081fd5b6110aa8f8c83860101610f26565b828c015250835250918701919087019061102f565b8452509699919850909650505050505050565b60006000198214156110e6576110e6610d83565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611112576111126110ed565b500490565b600082611126576111266110ed565b500690565b60008161113a5761113a610d83565b506000190190565b600081600019048311821515161561115c5761115c610d83565b500290565b600181815b8085111561119c57816000190482111561118257611182610d83565b8085161561118f57918102915b93841c9390800290611166565b509250929050565b6000826111b35750600161074d565b816111c05750600061074d565b81600181146111d657600281146111e0576111fc565b600191505061074d565b60ff8411156111f1576111f1610d83565b50506001821b61074d565b5060208310610133831016604e8410600b841016171561121f575081810a61074d565b6112298383611161565b806000190482111561123d5761123d610d83565b029392505050565b600061058f83836111a456fe8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bda26469706673582212208e8620cfb80ea94c53ee3adde2472b6875d2bde7cdd30456b7174ead656dedf164736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","f55760008081fd5b87016040818e03601f19011215610f0c5760008081fd5b610f14610b7e565b8982015188811115610f265760008081fd5b610f348f8c83860101610dd4565b825250604082015188811115610f4a5760008081fd5b610f588f8c83860101610dd4565b828c0152508352509187019190870190610edd565b8452509699919850909650505050505050565b63b95aa35560e01b600052603260045260246000fd5b60008251610fa8818460208701610d3f565b9190910192915050565b63b95aa35560e01b600052601160045260246000fd5b60008219821115610fdb57610fdb610fb2565b500190565b600082821015610ff257610ff2610fb2565b500390565b60608152600061101e6060830160078152661d17d85cdcd95d60ca1b602082015260400190565b6020838203818501526110318287610d6f565b915060408483038186015281830186518385528181518084528487019150848160051b8801019350858301925060005b818110156110b157878503603f190183528351805187875261108588880182610d6f565b91890151878303888b015291905061109d8183610d6f565b965050509286019291860191600101611061565b50929a9950505050505050505050565b6000602082840312156110d357600080fd5b5051919050565b60006000198214156110ee576110ee610fb2565b5060010190565b63b95aa35560e01b600052601260045260246000fd5b60008261111a5761111a6110f5565b500490565b60008261112e5761112e6110f5565b500690565b60008161114257611142610fb2565b506000190190565b600081600019048311821515161561116457611164610fb2565b500290565b600181815b808511156111a457816000190482111561118a5761118a610fb2565b8085161561119757918102915b93841c939080029061116e565b509250929050565b6000826111bb57506001610832565b816111c857506000610832565b81600181146111de57600281146111e857611204565b6001915050610832565b60ff8411156111f9576111f9610fb2565b50506001821b610832565b5060208310610133831016604e8410600b8410161715611227575081810a610832565b6112318383611169565b806000190482111561124557611245610fb2565b029392505050565b600061067483836111ac56fe105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693ca26469706673582212200a36053236258d6fb9c54389675ef794e2dd19edb1d76ee19d5bf907e1285a0064736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"selector\":[3934721323,3023292362],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[4242006977,1530027384],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"selector\":[2608902224,1630350335],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TransferEventEventResponse> getTransferEventEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from_account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to_account = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(asset_value)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(asset_value)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(asset_value)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<Boolean, BigInteger> select(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String transfer(String from_account, String to_account, BigInteger amount,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int16>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] account;

        public BigInteger asset_value;

        public BigInteger ret;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] from_account;

        public byte[] to_account;

        public BigInteger amount;

        public BigInteger ret;
    }
}
