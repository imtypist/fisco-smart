name: FISCO-BCOS GitHub Actions
on:
  push:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [published, created, edited]
env:
  CCACHE_DIR: ${{ github.workspace }}/ccache

jobs:
  build_with_clang:
    name: build_with_clang
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            deps/src
            ccache
          key: hunter-clang-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-clang-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-clang-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-clang-v8-notest-${{ runner.temp }}-
      - name: install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install ccache libomp
      - name: install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: sudo apt install -y git curl build-essential clang cmake ccache libzstd-dev
      - name: configure
        if: runner.os == 'macOS'
        run: mkdir build && cd build && export SDKROOT=$(xcrun --sdk macosx --show-sdk-path) && cmake .. -DTESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=ON -DHUNTER_CONFIGURATION_TYPES=Release
      - name: compile
        run: cd build && make -j3 && make tar
      - name: run test
        run: cd build && CTEST_OUTPUT_ON_FAILURE=TRUE make test
      - name: tar fisco-bcos for MacOS
        run: cd build && mv fisco-bcos-air/ bin/ && cp ../tools/BcosAirBuilder/build_chain.sh bin/ && cd bin && strip fisco-bcos && tar -cvzf fisco-bcos.tar.gz fisco-bcos build_chain.sh
      - uses: actions/upload-artifact@v2
        with:
          name: fisco-bcos-MacOS.zip
          path: build/bin/fisco-bcos.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: BcosRpcService-MacOS.zip
          path: build/fisco-bcos-pro/BcosRpcService.tgz
      - uses: actions/upload-artifact@v2
        with:
          name: BcosGatewayService-MacOS.zip
          path: build/fisco-bcos-pro/BcosGatewayService.tgz
      - uses: actions/upload-artifact@v2
        with:
          name: BcosNodeService-MacOS.zip
          path: build/fisco-bcos-pro/BcosNodeService.tgz
  build_with_gcc:
    name: build_with_gcc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            deps/src
            ccache
          key: hunter-gcc-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-gcc-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-gcc-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-gcc-v8-notest-${{ runner.temp }}-
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - name: install Ubuntu dependencies
        run: sudo apt install -y libzstd-dev git curl build-essential cmake ccache
      - name: configure
        # Note: must run test inner build directory, otherwise the gateway ut maybe failed
        run: mkdir -p build && cd build && cmake .. -DTESTS=OFF -DTOOLS=ON -DHUNTER_CONFIGURATION_TYPES=Debug
      - name: compile
        run: cd build && make -j3
  ubuntu18_04_build_with_gcc:
    name: ubuntu18_04_build_with_gcc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            deps/src
            ccache
          key: hunter-ubuntu-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-ubuntu-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-ubuntu-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-ubuntu-v8-notest-${{ runner.temp }}-
      - name: install Ubuntu dependencies
        run: sudo apt-get install -y git curl build-essential cmake ccache lcov libzstd-dev
      - name: configure
        run: mkdir build && cd build && cmake .. -DTESTS=OFF -DHUNTER_CONFIGURATION_TYPES=Debug
      - name: compile
        run: cd build && make -j2
        
  build_with_arm_linux:
    name: build_with_arm_linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - arch: aarch64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /Users/runner/.hunter/
            /home/runner/work/FISCO-BCOS/deps/src
            ccache
          key: hunter-gcc-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-gcc-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-gcc-v8-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-gcc-v8-notest-${{ runner.temp }}-
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - name: build
        id: build
        uses: uraimo/run-on-arch-action@v2.0.4
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu20.04
          # Upload docker image to your project's public package registry
          githubToken: ${{ github.token }}
          # Create cached/volume directories on host
          setup: |
            mkdir -p ~/.ccache
          # Mount cached directories in the container for faster builds
          dockerRunArgs: |
            --volume "/home/runner:/root"
          # compile things in the container
          run: |
            apt-get update -q -y
            apt-get install -y git curl build-essential cmake ccache lcov libzstd-dev zlib1g zlib1g-dev flex bison
            /usr/sbin/update-ccache-symlinks
            echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
            curl https://sh.rustup.rs -sSf | bash -s -- -y
            export PATH=/root/.cargo/bin:${PATH}
            mkdir -p build && cd build && cmake .. -DTESTS=OFF
            cd build && make -j2

  build_with_centos:
    name: build_with_centos
    runs-on: ubuntu-20.04
    container:
      image: docker.io/centos:7
      volumes:
        - /github/home/.hunter:/github/home/.hunter
        - /__w/FISCO-BCOS:/__w/FISCO-BCOS
    steps:
      - name: install CentOS dependencies
        run: |
          yum install -y epel-release centos-release-scl
          yum install -y git make gcc gcc-c++ glibc-static glibc-devel cmake3 ccache llvm-toolset-7 devtoolset-7 libzstd-devel zlib-devel flex bison python-devel python3-devel
          source /opt/rh/devtoolset-7/enable
          alias cmake='cmake3'
          yum install -y https://repo.ius.io/ius-release-el7.rpm https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum swap -y git git224-core
          git --version
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            /home/runner/.hunter
            /github/home/.hunter
            deps/src
            ccache
          key: hunter-centos-v7-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            hunter-centos-v7-notest-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            hunter-centos-v7-notest-${{ runner.temp }}-${{ github.base_ref }}-
            hunter-centos-v7-notest-${{ runner.temp }}-
      - name: configure and compile
        run: |
          source /opt/rh/devtoolset-7/enable
          export LIBCLANG_PATH=/opt/rh/llvm-toolset-7/root/lib64/
          source /opt/rh/llvm-toolset-7/enable
          mkdir build && cd build && cmake3 .. -DTESTS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_STATIC=ON -DHUNTER_CONFIGURATION_TYPES=Release
          make -j3
          CTEST_OUTPUT_ON_FAILURE=TRUE make test
          make tar
      - name: tar fisco-bcos for CentOS
        run: cd build && mv fisco-bcos-air bin && cp ../tools/BcosAirBuilder/build_chain.sh bin/ && cd bin && strip fisco-bcos && tar -cvzf fisco-bcos.tar.gz fisco-bcos build_chain.sh
      - uses: actions/upload-artifact@v2
        with:
          name: fisco-bcos-linux.zip
          path: build/bin/fisco-bcos.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: BcosRpcService.zip
          path: build/fisco-bcos-pro/BcosRpcService.tgz
      - uses: actions/upload-artifact@v2
        with:
          name: BcosGatewayService.zip
          path: build/fisco-bcos-pro/BcosGatewayService.tgz
      - uses: actions/upload-artifact@v2
        with:
          name: BcosNodeService.zip
          path: build/fisco-bcos-pro/BcosNodeService.tgz